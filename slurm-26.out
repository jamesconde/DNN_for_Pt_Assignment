Using TensorFlow backend.
2018-06-22 17:53:13.384867: I tensorflow/core/platform/cpu_feature_guard.cc:140] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA
2018-06-22 17:53:14.454510: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1356] Found device 0 with properties: 
name: Tesla V100-PCIE-16GB major: 7 minor: 0 memoryClockRate(GHz): 1.38
pciBusID: 0000:05:00.0
totalMemory: 15.77GiB freeMemory: 15.35GiB
2018-06-22 17:53:15.121695: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1356] Found device 1 with properties: 
name: Tesla V100-PCIE-16GB major: 7 minor: 0 memoryClockRate(GHz): 1.38
pciBusID: 0000:08:00.0
totalMemory: 15.77GiB freeMemory: 15.35GiB
2018-06-22 17:53:15.864549: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1356] Found device 2 with properties: 
name: Tesla V100-PCIE-16GB major: 7 minor: 0 memoryClockRate(GHz): 1.38
pciBusID: 0000:0d:00.0
totalMemory: 15.77GiB freeMemory: 15.35GiB
2018-06-22 17:53:16.544029: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1356] Found device 3 with properties: 
name: Tesla V100-PCIE-16GB major: 7 minor: 0 memoryClockRate(GHz): 1.38
pciBusID: 0000:13:00.0
totalMemory: 15.77GiB freeMemory: 15.35GiB
2018-06-22 17:53:17.229169: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1356] Found device 4 with properties: 
name: Tesla V100-PCIE-16GB major: 7 minor: 0 memoryClockRate(GHz): 1.38
pciBusID: 0000:83:00.0
totalMemory: 15.77GiB freeMemory: 15.35GiB
2018-06-22 17:53:17.931758: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1356] Found device 5 with properties: 
name: Tesla V100-PCIE-16GB major: 7 minor: 0 memoryClockRate(GHz): 1.38
pciBusID: 0000:89:00.0
totalMemory: 15.77GiB freeMemory: 15.35GiB
2018-06-22 17:53:18.643189: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1356] Found device 6 with properties: 
name: Tesla V100-PCIE-16GB major: 7 minor: 0 memoryClockRate(GHz): 1.38
pciBusID: 0000:8e:00.0
totalMemory: 15.77GiB freeMemory: 15.35GiB
2018-06-22 17:53:19.369617: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1356] Found device 7 with properties: 
name: Tesla V100-PCIE-16GB major: 7 minor: 0 memoryClockRate(GHz): 1.38
pciBusID: 0000:91:00.0
totalMemory: 15.77GiB freeMemory: 15.35GiB
2018-06-22 17:53:19.387195: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1435] Adding visible gpu devices: 0, 1, 2, 3, 4, 5, 6, 7
2018-06-22 17:53:22.457966: I tensorflow/core/common_runtime/gpu/gpu_device.cc:923] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-06-22 17:53:22.458020: I tensorflow/core/common_runtime/gpu/gpu_device.cc:929]      0 1 2 3 4 5 6 7 
2018-06-22 17:53:22.458029: I tensorflow/core/common_runtime/gpu/gpu_device.cc:942] 0:   N Y Y Y N N N N 
2018-06-22 17:53:22.458034: I tensorflow/core/common_runtime/gpu/gpu_device.cc:942] 1:   Y N Y Y N N N N 
2018-06-22 17:53:22.458039: I tensorflow/core/common_runtime/gpu/gpu_device.cc:942] 2:   Y Y N Y N N N N 
2018-06-22 17:53:22.458044: I tensorflow/core/common_runtime/gpu/gpu_device.cc:942] 3:   Y Y Y N N N N N 
2018-06-22 17:53:22.458048: I tensorflow/core/common_runtime/gpu/gpu_device.cc:942] 4:   N N N N N Y Y Y 
2018-06-22 17:53:22.458053: I tensorflow/core/common_runtime/gpu/gpu_device.cc:942] 5:   N N N N Y N Y Y 
2018-06-22 17:53:22.458057: I tensorflow/core/common_runtime/gpu/gpu_device.cc:942] 6:   N N N N Y Y N Y 
2018-06-22 17:53:22.458062: I tensorflow/core/common_runtime/gpu/gpu_device.cc:942] 7:   N N N N Y Y Y N 
2018-06-22 17:53:22.462326: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1053] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 14866 MB memory) -> physical GPU (device: 0, name: Tesla V100-PCIE-16GB, pci bus id: 0000:05:00.0, compute capability: 7.0)
2018-06-22 17:53:22.628428: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1053] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:1 with 14866 MB memory) -> physical GPU (device: 1, name: Tesla V100-PCIE-16GB, pci bus id: 0000:08:00.0, compute capability: 7.0)
2018-06-22 17:53:22.791495: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1053] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:2 with 14866 MB memory) -> physical GPU (device: 2, name: Tesla V100-PCIE-16GB, pci bus id: 0000:0d:00.0, compute capability: 7.0)
2018-06-22 17:53:22.953610: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1053] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:3 with 14866 MB memory) -> physical GPU (device: 3, name: Tesla V100-PCIE-16GB, pci bus id: 0000:13:00.0, compute capability: 7.0)
2018-06-22 17:53:23.115798: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1053] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:4 with 14866 MB memory) -> physical GPU (device: 4, name: Tesla V100-PCIE-16GB, pci bus id: 0000:83:00.0, compute capability: 7.0)
2018-06-22 17:53:23.278323: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1053] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:5 with 14866 MB memory) -> physical GPU (device: 5, name: Tesla V100-PCIE-16GB, pci bus id: 0000:89:00.0, compute capability: 7.0)
2018-06-22 17:53:23.440321: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1053] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:6 with 14866 MB memory) -> physical GPU (device: 6, name: Tesla V100-PCIE-16GB, pci bus id: 0000:8e:00.0, compute capability: 7.0)
2018-06-22 17:53:23.602894: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1053] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:7 with 14866 MB memory) -> physical GPU (device: 7, name: Tesla V100-PCIE-16GB, pci bus id: 0000:91:00.0, compute capability: 7.0)
>>> Imports:
#coding=utf-8

from __future__ import print_function

try:
    import numpy
except:
    pass

try:
    from hyperopt import Trials, STATUS_OK, tpe
except:
    pass

try:
    from keras.datasets import mnist
except:
    pass

try:
    from keras.layers.core import Dense, Dropout, Activation
except:
    pass

try:
    from keras.models import Sequential
except:
    pass

try:
    from keras.utils import np_utils
except:
    pass

try:
    from keras.utils import to_categorical
except:
    pass

try:
    from hyperas import optim
except:
    pass

try:
    from hyperas.distributions import choice, uniform
except:
    pass

try:
    from sklearn.model_selection import train_test_split
except:
    pass

try:
    from macros_AWS import scale_x
except:
    pass

>>> Hyperas search space:

def get_space():
    return {
        'Dense': hp.choice('Dense', [100, 150, 50]),
        'Dropout': hp.uniform('Dropout', 0, 1),
        'Dense_1': hp.choice('Dense_1', [100, 150, 50]),
        'Activation': hp.choice('Activation', ['relu', 'sigmoid']),
        'Dropout_1': hp.uniform('Dropout_1', 0, 1),
        'Dropout_2': hp.choice('Dropout_2', ['three', 'four']),
        'Dense_2': hp.choice('Dense_2', [100, 150, 50]),
        'add': hp.choice('add', [Dropout(0.5), Activation('relu')]),
        'Dense_3': hp.choice('Dense_3', range(1,10)),
        'Activation_1': hp.choice('Activation_1', ['softmax','sigmoid']),
        'optimizer': hp.choice('optimizer', ['rmsprop', 'adam', 'sgd']),
        'batch_size': hp.choice('batch_size', range(50,200,10)),
    }

>>> Data
   1: 
   2: """
   3: Data providing function:
   4: 
   5: This function is separated from create_model() so that hyperopt
   6: won't reload data for each evaluation run.
   7: """
   8: #(x_train, y_train), (x_test, y_test) = mnist.load_data()
   9: #x_train = x_train.reshape(60000, 784)
  10: #x_test = x_test.reshape(10000, 784)
  11: #x_train = x_train.astype('float32')
  12: #x_test = x_test.astype('float32')
  13: #x_train /= 255
  14: #x_test /= 255
  15: #nb_classes = 10
  16: #y_train = np_utils.to_categorical(y_train, nb_classes)
  17: #y_test = np_utils.to_categorical(y_test, nb_classes)
  18: from sklearn.model_selection import train_test_split
  19: from macros_AWS import scale_x
  20: data_directory = '/home/rice/jmc32/Gridsearch_Data/'
  21: data_sample = 'PtRegression_for_DNN_Vars_MODE_15_noBitCompr_RPC_1m_redo.npy'
  22: scaler = 'maxabs'
  23: totalset = numpy.load(data_directory + data_sample)
  24: dataset, testset = train_test_split(totalset, test_size = 0.1)
  25: # Split into input (X) and output (Y) variables
  26: x_train_prescale = dataset[:,1:]
  27: y_train = dataset[:,0]
  28: x_test_prescale = testset[:,1:]
  29: y_test = testset[:,0]
  30: # Scale
  31: print(y_train.shape)
  32: print(y_test.shape)
  33: #print(numpy.matrix(y_train))
  34: x_train, x_test = scale_x(x_train_prescale, x_test_prescale, scaler)
  35: print(x_train.shape)
  36: print(x_test.shape)
  37: #y_train= to_categorical(y_train)
  38: #y_test= to_categorical(y_test)
  39: #x_train= to_categorical(x_train)
  40: #x_test= to_categorical(x_test)
  41: 
  42: 
  43: 
>>> Resulting replaced keras model:

   1: def keras_fmin_fnct(space):
   2: 
   3:     """
   4:     Model providing function:
   5: 
   6:     Create Keras model with double curly brackets dropped-in as needed.
   7:     Return value has to be a valid python dictionary with two customary keys:
   8:         - loss: Specify a numeric evaluation metric to be minimized
   9:         - status: Just use STATUS_OK and see hyperopt documentation if not feasible
  10:     The last one is optional, though recommended, namely:
  11:         - model: specify the model just created so that we can later use it again.
  12:     """
  13:     model = Sequential()
  14:     model.add(Dense(space['Dense'], input_shape=(7,)))
  15:     model.add(Activation('relu'))
  16:     model.add(Dropout(space['Dropout']))
  17:     model.add(Dense(space['Dense_1']))
  18:     model.add(Activation(space['Activation']))
  19:     model.add(Dropout(space['Dropout_1']))
  20: 
  21:     # If we choose 'four', add an additional fourth layer
  22:     if space['Dropout_2'] == 'four':
  23:         model.add(Dense(space['Dense_2']))
  24: 
  25:         # We can also choose between complete sets of layers
  26: 
  27:         model.add(space['add'])
  28:         model.add(Activation('relu'))
  29: 
  30:     model.add(Dense(space['Dense_3']))
  31:     model.add(Activation(space['Activation_1']))
  32: 
  33:     model.compile(loss='sparse_categorical_crossentropy', metrics=['accuracy'],
  34:                   optimizer=space['optimizer'])
  35: 
  36:     model.fit(x_train, y_train,
  37:               batch_size=space['batch_size'],
  38:               epochs=1,
  39:               verbose=2,
  40:               validation_data=(x_test, y_test))
  41:     score, acc = model.evaluate(x_test, y_test, verbose=0)
  42:     print('Test accuracy:', acc)
  43:     return {'loss': -acc, 'status': STATUS_OK, 'model': model}
  44: 
(900000,)
(100000,)
MaxAbs

(900000, 7)
(100000, 7)
Train on 900000 samples, validate on 100000 samples
Epoch 1/1
 - 49s - loss: 0.6960 - acc: 0.5561 - val_loss: 0.6849 - val_acc: 0.5649
Test accuracy: 0.56487
Train on 900000 samples, validate on 100000 samples
Epoch 1/1
 - 23s - loss: 0.6211 - acc: 0.5628 - val_loss: 0.4592 - val_acc: 0.5649
Test accuracy: 0.56487
Train on 900000 samples, validate on 100000 samples
Epoch 1/1
 - 41s - loss: nan - acc: 0.5642 - val_loss: nan - val_acc: 0.5649
Test accuracy: 0.56487
Train on 900000 samples, validate on 100000 samples
Epoch 1/1
 - 18s - loss: nan - acc: 1.0444e-04 - val_loss: nan - val_acc: 0.0000e+00
Test accuracy: 0.0
Train on 900000 samples, validate on 100000 samples
Epoch 1/1
 - 19s - loss: 0.2890 - acc: 0.8770 - val_loss: 0.2294 - val_acc: 0.9064
Test accuracy: 0.9064
(900000,)
(100000,)
MaxAbs

(900000, 7)
(100000, 7)
Evalutation of best performing model:

    32/100000 [..............................] - ETA: 12s
   992/100000 [..............................] - ETA: 5s 
  2304/100000 [..............................] - ETA: 4s
  3648/100000 [>.............................] - ETA: 4s
  4992/100000 [>.............................] - ETA: 3s
  6336/100000 [>.............................] - ETA: 3s
  7712/100000 [=>............................] - ETA: 3s
  9056/100000 [=>............................] - ETA: 3s
 10400/100000 [==>...........................] - ETA: 3s
 11712/100000 [==>...........................] - ETA: 3s
 13056/100000 [==>...........................] - ETA: 3s
 14400/100000 [===>..........................] - ETA: 3s
 15776/100000 [===>..........................] - ETA: 3s
 17120/100000 [====>.........................] - ETA: 3s
 18464/100000 [====>.........................] - ETA: 3s
 19776/100000 [====>.........................] - ETA: 3s
 21088/100000 [=====>........................] - ETA: 3s
 22464/100000 [=====>........................] - ETA: 2s
 23776/100000 [======>.......................] - ETA: 2s
 25088/100000 [======>.......................] - ETA: 2s
 26400/100000 [======>.......................] - ETA: 2s
 27744/100000 [=======>......................] - ETA: 2s
 29120/100000 [=======>......................] - ETA: 2s
 30496/100000 [========>.....................] - ETA: 2s
 31840/100000 [========>.....................] - ETA: 2s
 33184/100000 [========>.....................] - ETA: 2s
 34560/100000 [=========>....................] - ETA: 2s
 35936/100000 [=========>....................] - ETA: 2s
 37312/100000 [==========>...................] - ETA: 2s
 38656/100000 [==========>...................] - ETA: 2s
 40000/100000 [===========>..................] - ETA: 2s
 41344/100000 [===========>..................] - ETA: 2s
 42688/100000 [===========>..................] - ETA: 2s
 44032/100000 [============>.................] - ETA: 2s
 45408/100000 [============>.................] - ETA: 2s
 46816/100000 [=============>................] - ETA: 2s
 47936/100000 [=============>................] - ETA: 1s
 49088/100000 [=============>................] - ETA: 1s
 50336/100000 [==============>...............] - ETA: 1s
 51648/100000 [==============>...............] - ETA: 1s
 52928/100000 [==============>...............] - ETA: 1s
 54240/100000 [===============>..............] - ETA: 1s
 55552/100000 [===============>..............] - ETA: 1s
 56864/100000 [================>.............] - ETA: 1s
 58144/100000 [================>.............] - ETA: 1s
 59392/100000 [================>.............] - ETA: 1s
 60640/100000 [=================>............] - ETA: 1s
 61952/100000 [=================>............] - ETA: 1s
 63264/100000 [=================>............] - ETA: 1s
 64576/100000 [==================>...........] - ETA: 1s
 65824/100000 [==================>...........] - ETA: 1s
 67072/100000 [===================>..........] - ETA: 1s
 68320/100000 [===================>..........] - ETA: 1s
 69600/100000 [===================>..........] - ETA: 1s
 70912/100000 [====================>.........] - ETA: 1s
 72224/100000 [====================>.........] - ETA: 1s
 73472/100000 [=====================>........] - ETA: 1s
 74784/100000 [=====================>........] - ETA: 0s
 76096/100000 [=====================>........] - ETA: 0s
 77376/100000 [======================>.......] - ETA: 0s
 78688/100000 [======================>.......] - ETA: 0s
 79936/100000 [======================>.......] - ETA: 0s
 81184/100000 [=======================>......] - ETA: 0s
 82464/100000 [=======================>......] - ETA: 0s
 83776/100000 [========================>.....] - ETA: 0s
 85088/100000 [========================>.....] - ETA: 0s
 86368/100000 [========================>.....] - ETA: 0s
 87648/100000 [=========================>....] - ETA: 0s
 88960/100000 [=========================>....] - ETA: 0s
 90272/100000 [==========================>...] - ETA: 0s
 91584/100000 [==========================>...] - ETA: 0s
 92832/100000 [==========================>...] - ETA: 0s
 94144/100000 [===========================>..] - ETA: 0s
 95456/100000 [===========================>..] - ETA: 0s
 96768/100000 [============================>.] - ETA: 0s
 98080/100000 [============================>.] - ETA: 0s
 99392/100000 [============================>.] - ETA: 0s
100000/100000 [==============================] - 4s 39us/step
['0.22398148091197015', '0.90727']
Best performing model chosen hyper-parameters:
{'Activation_1': 1, 'Dense_2': 2, 'Dense_1': 0, 'Dense': 1, 'Dense_3': 3, 'Activation': 1, 'batch_size': 11, 'Dropout_1': 0.0886198698550964, 'add': 0, 'Dropout_2': 1, 'optimizer': 0, 'Dropout': 0.03323327852409652}
