Using TensorFlow backend.
2018-06-21 17:34:34.569864: I tensorflow/core/platform/cpu_feature_guard.cc:140] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA
2018-06-21 17:34:35.616580: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1356] Found device 0 with properties: 
name: Tesla V100-PCIE-16GB major: 7 minor: 0 memoryClockRate(GHz): 1.38
pciBusID: 0000:05:00.0
totalMemory: 15.77GiB freeMemory: 15.35GiB
2018-06-21 17:34:36.270012: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1356] Found device 1 with properties: 
name: Tesla V100-PCIE-16GB major: 7 minor: 0 memoryClockRate(GHz): 1.38
pciBusID: 0000:08:00.0
totalMemory: 15.77GiB freeMemory: 15.35GiB
2018-06-21 17:34:36.948234: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1356] Found device 2 with properties: 
name: Tesla V100-PCIE-16GB major: 7 minor: 0 memoryClockRate(GHz): 1.38
pciBusID: 0000:0d:00.0
totalMemory: 15.77GiB freeMemory: 15.35GiB
2018-06-21 17:34:37.647486: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1356] Found device 3 with properties: 
name: Tesla V100-PCIE-16GB major: 7 minor: 0 memoryClockRate(GHz): 1.38
pciBusID: 0000:13:00.0
totalMemory: 15.77GiB freeMemory: 15.35GiB
2018-06-21 17:34:38.349212: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1356] Found device 4 with properties: 
name: Tesla V100-PCIE-16GB major: 7 minor: 0 memoryClockRate(GHz): 1.38
pciBusID: 0000:83:00.0
totalMemory: 15.77GiB freeMemory: 15.35GiB
2018-06-21 17:34:39.064700: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1356] Found device 5 with properties: 
name: Tesla V100-PCIE-16GB major: 7 minor: 0 memoryClockRate(GHz): 1.38
pciBusID: 0000:89:00.0
totalMemory: 15.77GiB freeMemory: 15.35GiB
2018-06-21 17:34:39.794406: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1356] Found device 6 with properties: 
name: Tesla V100-PCIE-16GB major: 7 minor: 0 memoryClockRate(GHz): 1.38
pciBusID: 0000:8e:00.0
totalMemory: 15.77GiB freeMemory: 15.35GiB
2018-06-21 17:34:40.546615: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1356] Found device 7 with properties: 
name: Tesla V100-PCIE-16GB major: 7 minor: 0 memoryClockRate(GHz): 1.38
pciBusID: 0000:91:00.0
totalMemory: 15.77GiB freeMemory: 15.35GiB
2018-06-21 17:34:40.564036: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1435] Adding visible gpu devices: 0, 1, 2, 3, 4, 5, 6, 7
2018-06-21 17:34:43.602022: I tensorflow/core/common_runtime/gpu/gpu_device.cc:923] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-06-21 17:34:43.602435: I tensorflow/core/common_runtime/gpu/gpu_device.cc:929]      0 1 2 3 4 5 6 7 
2018-06-21 17:34:43.602464: I tensorflow/core/common_runtime/gpu/gpu_device.cc:942] 0:   N Y Y Y N N N N 
2018-06-21 17:34:43.602470: I tensorflow/core/common_runtime/gpu/gpu_device.cc:942] 1:   Y N Y Y N N N N 
2018-06-21 17:34:43.602474: I tensorflow/core/common_runtime/gpu/gpu_device.cc:942] 2:   Y Y N Y N N N N 
2018-06-21 17:34:43.602479: I tensorflow/core/common_runtime/gpu/gpu_device.cc:942] 3:   Y Y Y N N N N N 
2018-06-21 17:34:43.602484: I tensorflow/core/common_runtime/gpu/gpu_device.cc:942] 4:   N N N N N Y Y Y 
2018-06-21 17:34:43.602488: I tensorflow/core/common_runtime/gpu/gpu_device.cc:942] 5:   N N N N Y N Y Y 
2018-06-21 17:34:43.602492: I tensorflow/core/common_runtime/gpu/gpu_device.cc:942] 6:   N N N N Y Y N Y 
2018-06-21 17:34:43.602497: I tensorflow/core/common_runtime/gpu/gpu_device.cc:942] 7:   N N N N Y Y Y N 
2018-06-21 17:34:43.606315: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1053] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 14866 MB memory) -> physical GPU (device: 0, name: Tesla V100-PCIE-16GB, pci bus id: 0000:05:00.0, compute capability: 7.0)
2018-06-21 17:34:43.766932: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1053] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:1 with 14866 MB memory) -> physical GPU (device: 1, name: Tesla V100-PCIE-16GB, pci bus id: 0000:08:00.0, compute capability: 7.0)
2018-06-21 17:34:43.927687: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1053] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:2 with 14866 MB memory) -> physical GPU (device: 2, name: Tesla V100-PCIE-16GB, pci bus id: 0000:0d:00.0, compute capability: 7.0)
2018-06-21 17:34:44.087651: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1053] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:3 with 14866 MB memory) -> physical GPU (device: 3, name: Tesla V100-PCIE-16GB, pci bus id: 0000:13:00.0, compute capability: 7.0)
2018-06-21 17:34:44.248909: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1053] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:4 with 14866 MB memory) -> physical GPU (device: 4, name: Tesla V100-PCIE-16GB, pci bus id: 0000:83:00.0, compute capability: 7.0)
2018-06-21 17:34:44.413511: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1053] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:5 with 14866 MB memory) -> physical GPU (device: 5, name: Tesla V100-PCIE-16GB, pci bus id: 0000:89:00.0, compute capability: 7.0)
2018-06-21 17:34:44.576772: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1053] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:6 with 14866 MB memory) -> physical GPU (device: 6, name: Tesla V100-PCIE-16GB, pci bus id: 0000:8e:00.0, compute capability: 7.0)
2018-06-21 17:34:44.738513: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1053] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:7 with 14866 MB memory) -> physical GPU (device: 7, name: Tesla V100-PCIE-16GB, pci bus id: 0000:91:00.0, compute capability: 7.0)
>>> Imports:
#coding=utf-8

from __future__ import print_function

try:
    import numpy
except:
    pass

try:
    from hyperopt import Trials, STATUS_OK, tpe
except:
    pass

try:
    from keras.datasets import mnist
except:
    pass

try:
    from keras.layers.core import Dense, Dropout, Activation
except:
    pass

try:
    from keras.models import Sequential
except:
    pass

try:
    from keras.utils import np_utils
except:
    pass

try:
    from keras.utils import to_categorical
except:
    pass

try:
    from hyperas import optim
except:
    pass

try:
    from hyperas.distributions import choice, uniform
except:
    pass

try:
    from sklearn.model_selection import train_test_split
except:
    pass

try:
    from macros_AWS import scale_x
except:
    pass

>>> Hyperas search space:

def get_space():
    return {
        'Dropout': hp.uniform('Dropout', 0, 1),
        'Dense': hp.choice('Dense', [100, 150, 50]),
        'Activation': hp.choice('Activation', ['relu', 'sigmoid']),
        'Dropout_1': hp.uniform('Dropout_1', 0, 1),
        'Dropout_2': hp.choice('Dropout_2', ['three', 'four']),
        'add': hp.choice('add', [Dropout(0.5), Activation('relu')]),
        'Activation_1': hp.choice('Activation_1', ['softmax','sigmoid']),
        'optimizer': hp.choice('optimizer', ['rmsprop', 'adam', 'sgd']),
        'batch_size': hp.choice('batch_size', range(90,110)),
        'epochs': hp.choice('epochs', range(1,4)),
    }

>>> Data
   1: 
   2: """
   3: Data providing function:
   4: 
   5: This function is separated from create_model() so that hyperopt
   6: won't reload data for each evaluation run.
   7: """
   8: #(x_train, y_train), (x_test, y_test) = mnist.load_data()
   9: #x_train = x_train.reshape(60000, 784)
  10: #x_test = x_test.reshape(10000, 784)
  11: #x_train = x_train.astype('float32')
  12: #x_test = x_test.astype('float32')
  13: #x_train /= 255
  14: #x_test /= 255
  15: #nb_classes = 10
  16: #y_train = np_utils.to_categorical(y_train, nb_classes)
  17: #y_test = np_utils.to_categorical(y_test, nb_classes)
  18: from sklearn.model_selection import train_test_split
  19: from macros_AWS import scale_x
  20: data_directory = '/home/rice/jmc32/Gridsearch_Data/'
  21: data_sample = 'PtRegression_for_DNN_Vars_MODE_15_noBitCompr_RPC_1m_redo.npy'
  22: scaler = 'maxabs'
  23: totalset = numpy.load(data_directory + data_sample)
  24: dataset, testset = train_test_split(totalset, test_size = 0.1)
  25: # Split into input (X) and output (Y) variables
  26: x_train_prescale = dataset[:,1:]
  27: y_train = dataset[:,0]
  28: x_test_prescale = testset[:,1:]
  29: y_test = testset[:,0]
  30: # Scale
  31: print(y_train.shape)
  32: print(y_test.shape)
  33: #print(numpy.matrix(y_train))
  34: x_train, x_test = scale_x(x_train_prescale, x_test_prescale, scaler)
  35: print(x_train.shape)
  36: print(x_test.shape)
  37: #y_train= to_categorical(y_train)
  38: #y_test= to_categorical(y_test)
  39: #x_train= to_categorical(x_train)
  40: #x_test= to_categorical(x_test)
  41: 
  42: 
  43: 
>>> Resulting replaced keras model:

   1: def keras_fmin_fnct(space):
   2: 
   3:     """
   4:     Model providing function:
   5: 
   6:     Create Keras model with double curly brackets dropped-in as needed.
   7:     Return value has to be a valid python dictionary with two customary keys:
   8:         - loss: Specify a numeric evaluation metric to be minimized
   9:         - status: Just use STATUS_OK and see hyperopt documentation if not feasible
  10:     The last one is optional, though recommended, namely:
  11:         - model: specify the model just created so that we can later use it again.
  12:     """
  13:     model = Sequential()
  14:     model.add(Dense(100, input_shape=(7,)))
  15:     model.add(Activation('relu'))
  16:     model.add(Dropout(space['Dropout']))
  17:     model.add(Dense(space['Dense']))
  18:     model.add(Activation(space['Activation']))
  19:     model.add(Dropout(space['Dropout_1']))
  20: 
  21:     # If we choose 'four', add an additional fourth layer
  22:     if space['Dropout_2'] == 'four':
  23:         model.add(Dense(100))
  24: 
  25:         # We can also choose between complete sets of layers
  26: 
  27:         model.add(space['add'])
  28:         model.add(Activation('relu'))
  29: 
  30:     model.add(Dense(1))
  31:     model.add(Activation(space['Activation_1']))
  32: 
  33:     model.compile(loss='sparse_categorical_crossentropy', metrics=['accuracy'],
  34:                   optimizer=space['optimizer'])
  35: 
  36:     model.fit(x_train, y_train,
  37:               batch_size=space['batch_size'],
  38:               epochs=space['epochs'],
  39:               verbose=2,
  40:               validation_data=(x_test, y_test))
  41:     score, acc = model.evaluate(x_test, y_test, verbose=0)
  42:     print('Test accuracy:', acc)
  43:     return {'loss': -acc, 'status': STATUS_OK, 'model': model}
  44: 
(900000,)
(100000,)
MaxAbs

(900000, 7)
(100000, 7)
Train on 900000 samples, validate on 100000 samples
Epoch 1/2
 - 35s - loss: nan - acc: 0.5640 - val_loss: nan - val_acc: 0.5664
Epoch 2/2
 - 23s - loss: nan - acc: 0.5640 - val_loss: nan - val_acc: 0.5664
Test accuracy: 0.5664
Train on 900000 samples, validate on 100000 samples
Epoch 1/3
 - 30s - loss: nan - acc: 6.0000e-05 - val_loss: nan - val_acc: 0.0000e+00
Epoch 2/3
 - 29s - loss: nan - acc: 0.0000e+00 - val_loss: nan - val_acc: 0.0000e+00
Epoch 3/3
 - 29s - loss: nan - acc: 0.0000e+00 - val_loss: nan - val_acc: 0.0000e+00
Test accuracy: 0.0
Train on 900000 samples, validate on 100000 samples
Epoch 1/3
 - 30s - loss: nan - acc: 0.5640 - val_loss: nan - val_acc: 0.5664
Epoch 2/3
 - 30s - loss: nan - acc: 0.5640 - val_loss: nan - val_acc: 0.5664
Epoch 3/3
 - 30s - loss: nan - acc: 0.5640 - val_loss: nan - val_acc: 0.5664
Test accuracy: 0.5664
Train on 900000 samples, validate on 100000 samples
Epoch 1/2
 - 29s - loss: nan - acc: 0.5640 - val_loss: nan - val_acc: 0.5664
Epoch 2/2
 - 29s - loss: nan - acc: 0.5640 - val_loss: nan - val_acc: 0.5664
Test accuracy: 0.5664
Train on 900000 samples, validate on 100000 samples
Epoch 1/3
 - 26s - loss: nan - acc: 0.5640 - val_loss: nan - val_acc: 0.5664
Epoch 2/3
 - 26s - loss: nan - acc: 0.5640 - val_loss: nan - val_acc: 0.5664
Epoch 3/3
 - 26s - loss: nan - acc: 0.5640 - val_loss: nan - val_acc: 0.5664
Test accuracy: 0.5664
(900000,)
(100000,)
MaxAbs

(900000, 7)
(100000, 7)
Evalutation of best performing model:

    32/100000 [..............................] - ETA: 17s
   704/100000 [..............................] - ETA: 7s 
  1376/100000 [..............................] - ETA: 7s
  2208/100000 [..............................] - ETA: 7s
  3200/100000 [..............................] - ETA: 6s
  4512/100000 [>.............................] - ETA: 5s
  5824/100000 [>.............................] - ETA: 5s
  7136/100000 [=>............................] - ETA: 4s
  8416/100000 [=>............................] - ETA: 4s
  9696/100000 [=>............................] - ETA: 4s
 10976/100000 [==>...........................] - ETA: 4s
 12256/100000 [==>...........................] - ETA: 4s
 13536/100000 [===>..........................] - ETA: 3s
 14816/100000 [===>..........................] - ETA: 3s
 16096/100000 [===>..........................] - ETA: 3s
 17376/100000 [====>.........................] - ETA: 3s
 18656/100000 [====>.........................] - ETA: 3s
 19936/100000 [====>.........................] - ETA: 3s
 21216/100000 [=====>........................] - ETA: 3s
 22464/100000 [=====>........................] - ETA: 3s
 23744/100000 [======>.......................] - ETA: 3s
 25024/100000 [======>.......................] - ETA: 3s
 26304/100000 [======>.......................] - ETA: 3s
 27616/100000 [=======>......................] - ETA: 3s
 28960/100000 [=======>......................] - ETA: 2s
 30304/100000 [========>.....................] - ETA: 2s
 31648/100000 [========>.....................] - ETA: 2s
 32960/100000 [========>.....................] - ETA: 2s
 34240/100000 [=========>....................] - ETA: 2s
 35520/100000 [=========>....................] - ETA: 2s
 36800/100000 [==========>...................] - ETA: 2s
 38048/100000 [==========>...................] - ETA: 2s
 39328/100000 [==========>...................] - ETA: 2s
 40640/100000 [===========>..................] - ETA: 2s
 41952/100000 [===========>..................] - ETA: 2s
 43232/100000 [===========>..................] - ETA: 2s
 44512/100000 [============>.................] - ETA: 2s
 45824/100000 [============>.................] - ETA: 2s
 47200/100000 [=============>................] - ETA: 2s
 48512/100000 [=============>................] - ETA: 2s
 49888/100000 [=============>................] - ETA: 2s
 51232/100000 [==============>...............] - ETA: 1s
 52576/100000 [==============>...............] - ETA: 1s
 53824/100000 [===============>..............] - ETA: 1s
 55200/100000 [===============>..............] - ETA: 1s
 56608/100000 [===============>..............] - ETA: 1s
 58016/100000 [================>.............] - ETA: 1s
 59392/100000 [================>.............] - ETA: 1s
 60800/100000 [=================>............] - ETA: 1s
 62208/100000 [=================>............] - ETA: 1s
 63584/100000 [==================>...........] - ETA: 1s
 64928/100000 [==================>...........] - ETA: 1s
 66336/100000 [==================>...........] - ETA: 1s
 67744/100000 [===================>..........] - ETA: 1s
 69120/100000 [===================>..........] - ETA: 1s
 70464/100000 [====================>.........] - ETA: 1s
 71808/100000 [====================>.........] - ETA: 1s
 73152/100000 [====================>.........] - ETA: 1s
 74496/100000 [=====================>........] - ETA: 1s
 75872/100000 [=====================>........] - ETA: 0s
 77216/100000 [======================>.......] - ETA: 0s
 78560/100000 [======================>.......] - ETA: 0s
 79936/100000 [======================>.......] - ETA: 0s
 81248/100000 [=======================>......] - ETA: 0s
 82592/100000 [=======================>......] - ETA: 0s
 83968/100000 [========================>.....] - ETA: 0s
 85312/100000 [========================>.....] - ETA: 0s
 86592/100000 [========================>.....] - ETA: 0s
 87936/100000 [=========================>....] - ETA: 0s
 89312/100000 [=========================>....] - ETA: 0s
 90656/100000 [==========================>...] - ETA: 0s
 92000/100000 [==========================>...] - ETA: 0s
 93376/100000 [===========================>..] - ETA: 0s
 94688/100000 [===========================>..] - ETA: 0s
 96032/100000 [===========================>..] - ETA: 0s
 97376/100000 [============================>.] - ETA: 0s
 98688/100000 [============================>.] - ETA: 0s
100000/100000 [==============================] - 4s 39us/step
['nan', '0.56197']
Best performing model chosen hyper-parameters:
{'Activation_1': 0, 'epochs': 1, 'Dense': 2, 'Activation': 1, 'batch_size': 16, 'Dropout_1': 0.7342146978592597, 'add': 0, 'Dropout_2': 1, 'optimizer': 2, 'Dropout': 0.3207527760045966}
